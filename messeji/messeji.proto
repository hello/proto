option java_package = "com.hello.messeji.api";

import "audio_commands.proto";


message ReceiveMessageRequest {
    required string sense_id = 1;
    repeated int64 message_read_id = 2;
}


message Message {

    enum Type { PLAY_AUDIO = 0; STOP_AUDIO = 1; }

    // Unique ID associated with the sender, in order to disambiguate between multiple senders
    // each generating their own idea of an “order” (see below)
    optional string sender_id = 1;

    // The order as indicated by the sender. Usually this will be a timestamp.
    // The greater the order, the more recent the message.
    required int64 order = 2;

    // Server-generated unique messageId for this message.
    optional int64 message_id = 3;

    // What kind of message this is.
    required Type type = 4;

    optional PlayAudio play_audio = 5;

    optional StopAudio stop_audio = 6;

    optional Volume volume = 7;

    optional VoiceControl voice_control = 8;
}


message BatchMessage {
    repeated Message message = 1;
}


message MessageStatus {
    enum State {

        /*
        The initial state of a message when it is first created, meaning it is still in flight but potentially not yet sent.
        This is a non-terminal state.
        */
        PENDING = 0;

        /*
        Message has attempted to be sent to a recipient, but it has not yet been acknowledged as being received.
        There is no guarantee that the message will ever be received.
        If a message is idempotent, the sender may want to attempt to re-send, i.e. to ensure that the white noise
        turns off. This state may be either non-terminal or terminal.
        */
        SENT = 1;

        // The message has been received by the intended recipient and acknowledged. This is a terminal state.
        RECEIVED = 2;

        // The message age exceeded its timeout and will not be delivered. Terminal state.
        EXPIRED = 3;
    }

    required int64 message_id = 1;
    required State state = 2;
}
